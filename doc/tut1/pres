how to make a polished platformer

how to make a (semi-)polished platformer

this series will cover my
* thought process
* development process
* artistic process (to an extent)

what you need to know
* lua
* love2d
* basic programming/problem solving skill
* basic math skill (~ trig)

what you'll learn
* simple prototyping
* c
* c's crazy things
    * pointers
    * memory management
    * undefined behavior
    * debugging

step 1

prototype

@res/love.png

lua + love2d
* fast (development)
* flexible
* safe

step 2

implement engine

(according to prototype)

C + Compatability Layer

C
* wicked fast
* clean
* simple to use ABI (external scripting?)
* portable

use a compatability layer
* 'cause i don't want to write win32 crap
* 'cause X kinda blows
* 'cause ObjC is terrible (and Swift isn't that much better)

now you've finished 80% of the work

step 3

polish game/engine

this is the final 80% of work

polish gives a game that
JE NE SE QUOS
that makes it fun to play

the funness factor is also influenced by the underlying mechanics

but it's heavily affected by the polish

(≧ロ≦)

time for the first part

prototyping time

* basic physics (using bump.lua)
* player movement (!!!)
* fighting mechanics
* basic enemy ai

\

some explantion

the points are just x, y pairs of previous player locations
that are mushed together in a list

(i.e. trail[0] is the x location, trail[1] is the y location)

push new trails onto the front, pull old ones off the back

@trail1.png

@trail2.png

\

some explantion

the normal is the vector pointing away from the face of the object

@normal1.png

@normal2.png

@normal3.png

so for a walljump...

@walljump1.png

@walljump2.png
